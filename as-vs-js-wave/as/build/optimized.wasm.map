{"version":3,"sources":["~lib/rt/common.ts","assembly/index.ts"],"names":[],"mappings":"+GCqDE,AAAS,IACT,AAAS,IACT,AAAS,EAAQ,KACjB,AAAS,IACT,AAAS,AAAY,EAAU,AAAI,IAAJ,MAC/B,AAAS,AAAY,EAAU,AAAI,EAAJ,MAC/B,AAAS,AAAY,EAAS,AAAK,EAAL,MAC9B,AAAS,AAAY,EAAS,AAAK,EAAL,QAEd,EAAI,KAClB,IAAO,EAAI,WAAS,KACpB,EAAO,AAAY,EAAZ,GAAoB,OAAK,KAFN,AAAE,WAKzB,AAAQ,MAAG,EAAI,KAClB,UAAY,KACZ,AArDW,EAA2B,AAqDhB,EAAf,EAAO,IArDwC,IAAiB,KAmD9C,AAAE,iBAQnB,IACE,IACL,IACA,IACI,IACA,IACA,MAGK,EAAI,KAElB,AAAI,AADI,aACE,KACR,UAAQ,KACR,KAAQ,KACR,WAEF,AAAI,EAAM,KACR,UAAQ,EAAC,MACT,UACA,WAVuB,AAAE,WAcxB,AAAQ,MAAG,EAAI,KAClB,AAAI,cACW,eAUb,AAAqB,AADX,UAAS,AAHP,AAAC,AAAS,EAHN,EAAI,UAGP,EAFG,EAAI,WAEa,GAAK,GAGZ,IAAM,AAFpB,AAAC,EANG,EAAI,UAME,AALT,EAAG,EAAI,WAKa,GAAK,GAEC,MACX,EAAO,MAA/B,KACJ,EAAQ,YAAS,0BAbM,AAAE,WAiBxB,AAAQ,MAAG,EAAI,KAElB,AAAQ,eACR,AAAI,AAFO,aAGD,iBAGR,KAAQ,AADJ,AAlGiB,MAAe,AAAiB,MAAa,AAkGrD,EAAI,YADK,EAAI,AA5GX,AAA2B,EAA3B,gCAWqB,EAAI,QAArC,EAAI,aAoGP,EAAY,EAAK,EAAK,QAExB,AAAI,EAAS,KACX,QAAY,MAEZ,AAhHS,EAA2B,EAAgB,IAAiB,AAcpD,AAAC,EAAE,AADd,EAAK,QACsB,AAAC,AAAC,EAAc,IAAS,IAAM,MACpE,AAAS,AAAC,EAAO,GAAM,AAAC,EAAM,IAAS,IAAO,MAD1C,EAAM,QAqFiB,AAAE","sourceRoot":"./optimized.wasm","sourcesContent":["// Alignment guarantees\n\n// @ts-ignore: decorator\n@inline export const AL_BITS: u32 = 4; // 16 bytes to fit up to v128\n// @ts-ignore: decorator\n@inline export const AL_SIZE: usize = 1 << <usize>AL_BITS;\n// @ts-ignore: decorator\n@inline export const AL_MASK: usize = AL_SIZE - 1;\n\n// Extra debugging\n\n// @ts-ignore: decorator\n@inline export const DEBUG = true;\n// @ts-ignore: decorator\n@inline export const TRACE = false;\n// @ts-ignore: decorator\n@inline export const RTRACE = isDefined(ASC_RTRACE);\n// @ts-ignore: decorator\n@inline export const PROFILE = isDefined(ASC_PROFILE);\n\n// Memory manager\n\n// ╒════════════ Memory manager block layout (32-bit) ═════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤\n// │                           MM info                             │ -4\n// ╞>ptr═══════════════════════════════════════════════════════════╡\n// │                              ...                              │\n@unmanaged export class BLOCK {\n  /** Memory manager info. */\n  mmInfo: usize;\n}\n\n/** Overhead of a memory manager block. */\n// @ts-ignore: decorator\n@inline export const BLOCK_OVERHEAD: usize = offsetof<BLOCK>();\n\n/** Maximum size of a memory manager block's payload. */\n// @ts-ignore: decorator\n@inline export const BLOCK_MAXSIZE: usize = (1 << 30) - BLOCK_OVERHEAD;\n\n// Garbage collector\n\n// ╒══════════ Garbage collector object layout (32-bit) ═══════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤\n// │                     Memory manager block                      │ -20\n// ╞═══════════════════════════════════════════════════════════════╡\n// │                            GC info                            │ -16\n// ├───────────────────────────────────────────────────────────────┤\n// │                            GC info                            │ -12\n// ├───────────────────────────────────────────────────────────────┤\n// │                            RT id                              │ -8\n// ├───────────────────────────────────────────────────────────────┤\n// │                            RT size                            │ -4\n// ╞>ptr═══════════════════════════════════════════════════════════╡\n// │                              ...                              │\n@unmanaged export class OBJECT extends BLOCK {\n  /** Garbage collector info. */\n  gcInfo: u32;\n  /** Garbage collector info. */\n  gcInfo2: u32;\n  /** Runtime class id. */\n  rtId: u32;\n  /** Runtime object size. */\n  rtSize: u32;\n}\n\n/** Overhead of a garbage collector object. Excludes memory manager block overhead. */\n// @ts-ignore: decorator\n@inline export const OBJECT_OVERHEAD: usize = (offsetof<OBJECT>() - BLOCK_OVERHEAD + AL_MASK) & ~AL_MASK;\n\n/** Maximum size of a garbage collector object's payload. */\n// @ts-ignore: decorator\n@inline export const OBJECT_MAXSIZE: usize = BLOCK_MAXSIZE - OBJECT_OVERHEAD;\n\n/** Total of memory manager and garbage collector overhead. */\n// @ts-ignore: decorator\n@inline export const TOTAL_OVERHEAD: usize = BLOCK_OVERHEAD + OBJECT_OVERHEAD;\n","/// <reference path=\"../node_modules/assemblyscript/index.d.ts\" />\n\n@final\nclass Pointer {\n  // just need for making tslint happy\n  [key: number]: number;\n\n  @inline constructor(offset: usize = 0) {\n    return changetype<Pointer>(offset);\n  }\n\n  @inline @operator(\"[]\") get(index: i32): i32 {\n    return load<i32>(changetype<usize>(this) + (<usize>index << alignof<i32>()));\n  }\n\n  @inline @operator(\"[]=\") set(index: i32, value: i32): void {\n    store<i32>(changetype<usize>(this) + (<usize>index << alignof<i32>()), value);\n  }\n}\n\n// Full int32 range is -0x80000000 to 0x7FFFFFFF. Use half.\n// @ts-ignore: decorator\n@inline function applyCap(x: i32): i32 {\n  return x < -0x40000000 ? -0x40000000 : (x > 0x3FFFFFFF ? 0x3FFFFFFF : x);\n}\n\n// @ts-ignore: decorator\n@inline function toRGB(x: i32): i32 {\n  // Map negative values to pink, positive to pale green, zero to black\n  var val = x >> 22;\n  if (val < 0) return ((-(val + 1)) | (((-(val + 1)) & 0xFE) << 15) | 0xFF000000); // pink\n  return (((val << 8) | ((val & 0xFE) << 15)) | 0xFF000000); // pale green\n}\n\nconst STATUS_DEFAULT = 0;\nconst STATUS_WALL = 1;\nconst STATUS_POS_TRANSMITTER = 2;\nconst STATUS_NEG_TRANSMITTER = 3;\n\nconst FORCE_DAMPING_BIT_SHIFT = 4;\n\nlet width = 0;\nlet height = 0;\nlet area = 0;\n\nlet image:  Pointer;\nlet force:  Pointer;\nlet status: Pointer;\nlet u:      Pointer;\nlet v:      Pointer;\n\nexport function init(_ignored: i32, offset: i32, w: i32, h: i32): void {\n\n  width  = w;\n  height = h;\n  area   = width * height;\n  image  = new Pointer(offset);\n  force  = new Pointer(offset +  4 * area);\n  status = new Pointer(offset +  8 * area);\n  u      = new Pointer(offset + 12 * area);\n  v      = new Pointer(offset + 16 * area);\n\n  for (let i = 0; i < height; ++i) {\n    status[i * width] = STATUS_WALL;\n    status[i * width + width - 1] = STATUS_WALL;\n  }\n\n  for (let i = 0; i < width; ++i) {\n    status[i] = STATUS_WALL;\n    status[area - width + i] = STATUS_WALL;\n  }\n}\n\nexport function step(signalAmplitude: i32, dampingBitShift: i32): void {\n  let\n    _area = area,\n    _status = status,\n    _u = u,\n    _v = v,\n    _force = force,\n    _image = image,\n    _width = width;\n\n  // First loop: look for noise generator pixels and set their values in u\n  for (let i = 0; i < _area; ++i) {\n    let s = _status[i];\n    if (s === STATUS_POS_TRANSMITTER) {\n      _u[i] = signalAmplitude;\n      _v[i] = 0;\n      _force[i] = 0;\n    }\n    if (s === STATUS_NEG_TRANSMITTER) {\n      _u[i] = -signalAmplitude;\n      _v[i] = 0;\n      _force[i] = 0;\n    }\n  }\n\n  for (let i = 0; i < _area; ++i) {\n    if (_status[i] === STATUS_DEFAULT) {\n      let uCen   = _u[i];\n      let uNorth = _u[i - _width];\n      let uSouth = _u[i + _width];\n      let uEast  = _u[i + 1];\n      let uWest  = _u[i - 1];\n\n      let uxx = (((uWest  + uEast)  >> 1) - uCen);\n      let uyy = (((uNorth + uSouth) >> 1) - uCen);\n\n      let vel = _v[i] + (uxx >> 1) + (uyy >> 1);\n      if (dampingBitShift) vel -= vel >> dampingBitShift;\n      _v[i] = applyCap(vel);\n    }\n  }\n\n  for (let i = 0; i < _area; ++i) {\n    let stat = _status[i];\n    let u = _u[i];\n    if (stat === STATUS_DEFAULT) {\n      let f = _force[i];\n      let capped = applyCap(u + _v[i]);\n      u = applyCap(f + capped);\n      _u[i] = u;\n      _force[i] = f - (f >> FORCE_DAMPING_BIT_SHIFT);\n    }\n    if (stat === STATUS_WALL) {\n      _image[i] = 0x00000000;\n    } else {\n      _image[i] = toRGB(u);\n    }\n  }\n}\n"]}